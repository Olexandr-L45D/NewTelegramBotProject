# handlers.py
# –¢—É—Ç –ª–æ–≥—ñ–∫–∞ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è/–∫–æ–º–∞–Ω–¥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (/start, /users, ‚Äú–ü—Ä–∏–≤—ñ—Ç!‚Äù —Ç–æ—â–æ).

import asyncio
from aiogram import types
from datetime import datetime
from database.db import users_collection, add_user_sync, log_conversation_sync
from bot.keyboards import main_menu_keyboard, mood_keyboard
from bot.states import DayCheck
from aiogram.dispatcher import FSMContext


async def start_handler(message: types.Message):
    # ‚úÖ –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—É
    await asyncio.to_thread(
        add_user_sync,
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )

    # ‚úÖ –ü–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤‚Äô—è üßò‚Äç‚ôÄÔ∏è\n\n–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:",
        reply_markup=main_menu_keyboard()
    )
# –ê–ª–µ  —Ç–µ–ø–µ—Ä –±–æ—Ç –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–º, –∞–ª–µ —Ä–æ–±–æ—Ç—É –∑ –±–∞–∑–æ—é –≤—ñ–¥–¥–∞—Å—Ç—å —É –æ–∫—Ä–µ–º–∏–π –ø–æ—Ç—ñ–∫ ‚Äî –Ω–µ –±–ª–æ–∫—É—î –ø–æ–¥—ñ—ó Telegram.
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    chat_id = callback.message.chat.id

    if data == "day":
        await callback.message.answer("–Ø–∫ –ø—Ä–æ–π—à–æ–≤ —Ç–≤—ñ–π –¥–µ–Ω—å? –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç üëá", reply_markup=mood_keyboard())
        await DayCheck.waiting_for_mood.set()

    elif data == "stats":
        await callback.message.answer("üìä –¢—É—Ç –±—É–¥–µ —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å!")

    elif data == "search":
        await callback.message.answer("üîç –í–≤–µ–¥–∏ —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É:")

    elif data == "users":
        users = list(users_collection.find({}))
        if not users:
            await callback.message.answer("üòï –£ –±–∞–∑—ñ —â–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        else:
            text_lines = ["üë• –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:"]
            for i, user in enumerate(users, 1):
                uname = f"@{user.get('username')}" if user.get("username") else "‚Äî"
                full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
                uid = user.get("user_id", "‚Äî")
                text_lines.append(f"{i}. {full_name} ({uname}) ‚Äî {uid}")
            await callback.message.answer("\n".join(text_lines))

    elif data == "settings":
        await callback.message.answer("‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:\n- –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É\n- –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è")

    await callback.answer()

async def save_handler(message: types.Message):
    doc = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "text": message.text.replace("/save", "").strip() or "–ë–µ–∑ —Ç–µ–∫—Å—Ç—É",
        "created_at": datetime.utcnow()
    }
    users_collection.insert_one(doc)
    await message.reply("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ!")

async def id_handler(message: types.Message):
    await message.reply(f"üîπ –¢–≤—ñ–π Telegram ID: {message.from_user.id}")

#  –ù–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è /users - –æ—Ç—Ä–∏–º—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—Ä–∏ –Ω–∞—Ç—Å–∏–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É

async def users_handler(message: types.Message):
    users = list(users_collection.find({}))
    if not users:
        await message.reply("üòï –£ –±–∞–∑—ñ —â–µ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    text_lines = ["üë• –ó–±–µ—Ä–µ–∂–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:"]
    for i, user in enumerate(users, 1):
        uname = f"@{user.get('username')}" if user.get("username") else "‚Äî"
        full_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
        uid = user.get("user_id", "‚Äî")
        text_lines.append(f"{i}. {full_name} ({uname}) ‚Äî {uid}")

    text = "\n".join(text_lines)
    await message.reply(text)

# --- –Ω–æ–≤–∏–π ‚Äú–¥—Ä—É–∂–Ω—ñ–π‚Äù —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª ---
async def daycheck_start_handler(message: types.Message):
    """–ó–∞–ø—É—Å–∫–∞—î –¥—ñ–∞–ª–æ–≥ '–Ø–∫ –ø—Ä–æ–π—à–æ–≤ —Ç–≤—ñ–π –¥–µ–Ω—å?'"""
    await message.answer("–Ø–∫ –ø—Ä–æ–π—à–æ–≤ —Ç–≤—ñ–π –¥–µ–Ω—å? –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç üëá", reply_markup=mood_keyboard())
    await DayCheck.waiting_for_mood.set()

async def mood_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –Ω–∞—Å—Ç—Ä–æ—é"""
    mood_map = {
        "mood_good": "–î–æ–±—Ä–µ üòä",
        "mood_ok": "–¢–∞–∫ —Å–æ–±—ñ üòê",
        "mood_bad": "–ü–æ–≥–∞–Ω–æ üòì"
    }
    mood = mood_map.get(callback.data, "–ù–µ–≤—ñ–¥–æ–º–æ")
    await asyncio.to_thread(log_conversation_sync, callback.from_user.id, callback.from_user.username, mood, "day_mood")

    await callback.message.answer("–•–æ—á–µ—à —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ? –ù–∞–ø–∏—à–∏ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –∞–±–æ –≤–≤–µ–¥–∏ /skip, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ üôÇ")
    await DayCheck.waiting_for_detail.set()
    await callback.answer()

async def detail_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏—Ä—ñ—à–∏–≤ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –¥–µ—Ç–∞–ª—è–º–∏"""
    detail = message.text
    await asyncio.to_thread(log_conversation_sync, message.from_user.id, message.from_user.username, detail, "day_detail")
    await message.answer("–î—è–∫—É—é, —â–æ –ø–æ–¥—ñ–ª–∏–≤—Å—è üíõ –Ø–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –º–æ–∂—É –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ—é –∞–±–æ –ø–æ—Ä–∞–¥—É üòâ")
    await state.finish()

async def skip_detail_handler(message: types.Message, state: FSMContext):
    """–ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏—Ä—ñ—à–∏–≤ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ"""
    await message.answer("–û–∫ üòä –Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à ‚Äî —Ä–æ–∑–ø–æ–≤—ñ—Å–∏ –ø—ñ–∑–Ω—ñ—à–µ.")
    await state.finish()    

async def back_to_menu_handler(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' ‚Äî –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."""

    await state.finish() 
    await callback_query.answer()  # –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, —â–æ–± Telegram –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞–≤ "–≥–æ–¥–∏–Ω–Ω–∏–∫"    

    await callback_query.message.edit_text(
        "üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

async def back_to_menu_from_calories(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.finish()
    await callback_query.message.edit_text(
        "üè† –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )

# async def back_to_menu_from_sleep(callback_query: types.CallbackQuery, state: FSMContext):
#     await callback_query.answer()
#     await state.finish()
#     await callback_query.message.edit_text(
#         "üåô –ú–µ–Ω—é —Å–Ω—É:",
#         reply_markup=sleep_menu_keyboard()
#     )

   

#     @dp.callback_query_handler(lambda c: c.data.startswith("back"))
# async def process_any_back(callback_query: types.CallbackQuery, state: FSMContext):
#     await state.finish()
#     await callback_query.message.edit_text(
#         "üîô –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", 
#         reply_markup=main_menu_keyboard
#     )

