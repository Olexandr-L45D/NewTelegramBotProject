# boot/handlers_sleep (–æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª —Å—É—Ç–æ –ø—ñ–¥ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ç—Ä–µ–∫–µ—Ä—É –≥–æ–¥–∏–Ω —Å–Ω—É)
from aiogram import types
from datetime import datetime, timedelta
from bot.keyboards import main_menu_keyboard, sleep_keyboard
from database.db import sleep_collection

# üí§ –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–µ–∫–µ—Ä–∞ —Å–Ω—É
async def sleep_start_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "üåô –°–∫—ñ–ª—å–∫–∏ –≥–æ–¥–∏–Ω —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ —Å–ø–∞–ª–∞?", reply_markup=sleep_keyboard()
    )
    await callback.answer()


# üí§ –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω (callback)
async def sleep_hours_callback_handler(callback: types.CallbackQuery):
    data = callback.data
    if data == "back_to_menu":
        await callback.message.answer("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ –≥–æ–¥–∏–Ω–Ω–∏–∫ –∑ callback_data (sleep_6.5 ‚Üí 6.5)
    hours = float(data.replace("sleep_", ""))
    user_id = callback.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")

    # --- –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É MongoDB ---
    sleep_collection.update_one(
        {"user_id": user_id, "date": today},
        {"$set": {"hours": hours}},
        upsert=True
    )

    # --- –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∑–∞ 7 –¥–Ω—ñ–≤ ---
    seven_days_ago = datetime.now() - timedelta(days=7)
    last_week_data = list(sleep_collection.find({
        "user_id": user_id,
        "date": {"$gte": seven_days_ago.strftime("%Y-%m-%d")}
    }).sort("date", -1))

    avg_sleep = round(sum(i["hours"] for i in last_week_data) / len(last_week_data), 1) if last_week_data else hours

    # --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 3 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å < 7 –≥–æ–¥ ---
    recent_days = list(sleep_collection.find({"user_id": user_id}).sort("date", -1).limit(3))
    low_sleep_days = [i for i in recent_days if i["hours"] < 7.0]

    if len(low_sleep_days) >= 3:
        warning = "\n‚ö†Ô∏è –¢–∏ —Å–ø–∞–ª–∞ –º–µ–Ω—à–µ 7 –≥–æ–¥–∏–Ω –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å.\n–°–ø—Ä–æ–±—É–π —Ä–∞–Ω—ñ—à–µ –ª—è–≥–∞—Ç–∏ üíñ"
    elif hours < 6.0:
        warning = "\nüò¥ –¢–≤—ñ–π —Å–æ–Ω –±—É–≤ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π! –í—ñ–¥–ø–æ—á–∏–Ω—å –±—ñ–ª—å—à–µ üí´"
    else:
        warning = ""

    await callback.message.answer(
        f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ {hours:.1f} –≥–æ–¥ —Å–Ω—É!\n"
        f"üìä –°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {avg_sleep:.1f} –≥–æ–¥–∏–Ω{warning}",
        reply_markup=main_menu_keyboard()
    )
    await callback.answer()


# üìÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω—É
async def sleep_stats_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    last_week_data = list(
        sleep_collection.find({"user_id": user_id}).sort("date", -1).limit(7)
    )

    if not last_week_data:
        await callback.message.answer("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–æ–Ω üò¥", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    # –§–æ—Ä–º—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    rows = [
        f"{d['date']} ‚Äî {d['hours']} –≥–æ–¥"
        for d in sorted(last_week_data, key=lambda x: x["date"], reverse=True)
    ]
    avg_sleep = round(sum(i["hours"] for i in last_week_data) / len(last_week_data), 1)
    text = "üìÜ *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω—É –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:*\n\n" + "\n".join(rows)
    text += f"\n\nüìä *–°–µ—Ä–µ–¥–Ω—ñ–π —Å–æ–Ω:* {avg_sleep:.1f} –≥–æ–¥"

    await callback.message.answer(text, parse_mode="Markdown", reply_markup=main_menu_keyboard())
    await callback.answer()
