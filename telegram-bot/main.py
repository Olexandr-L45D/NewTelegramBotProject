# main.py - –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É - –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞) ‚Äî —Ç—É—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–æ—Ç, Dispatcher, —ñ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏.

from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand

from bot.handlers import (
    start_handler,
    callback_handler,
    save_handler,
    id_handler,
    users_handler,
    daycheck_start_handler,
    mood_handler,
    detail_handler,
    skip_detail_handler,
)
from bot.states import DayCheck
from config import BOT_TOKEN
from bot.handlers_bmi import start_bmi, process_height, process_weight, process_age
from bot.states import BMIForm

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()  # FSM –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º'—è—Ç—ñ
dp = Dispatcher(bot, storage=storage)


# --- –ö–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é Telegram ---
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="ü§ñ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="save", description="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        BotCommand(command="day", description="üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?"),
        BotCommand(command="id", description="üÜî –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π Telegram ID"),
        BotCommand(command="users", description="üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ"),
        BotCommand(command="bmi", description="ü§ñ BMI"),
    ]
    await bot.set_my_commands(commands)

# --- Callback –∫–Ω–æ–ø–∫–∏ ---
dp.register_callback_query_handler(start_bmi, lambda c: c.data == "bmi")

# --- FSM –¥–ª—è BMI ---
dp.register_message_handler(process_height, state=BMIForm.waiting_for_height)
dp.register_message_handler(process_weight, state=BMIForm.waiting_for_weight)
dp.register_message_handler(process_age, state=BMIForm.waiting_for_age)

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è) ---
dp.register_message_handler(daycheck_start_handler, lambda m: m.text == "üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?")
dp.register_message_handler(users_handler, lambda m: m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
dp.register_message_handler(id_handler, lambda m: m.text == "üÜî –ú—ñ–π ID")

# --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ---
dp.register_message_handler(start_handler, Command("start"))
dp.register_message_handler(save_handler, Command("save"))
dp.register_message_handler(id_handler, Command("id"))
dp.register_message_handler(users_handler, Command("users"))
dp.register_message_handler(daycheck_start_handler, Command("day"))

# --- Callback (—ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏) ---
dp.register_callback_query_handler(callback_handler)

# --- FSM –ª–æ–≥—ñ–∫–∞ (–µ—Ç–∞–ø–∏ –¥—ñ–∞–ª–æ–≥—É "–Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?") ---
dp.register_callback_query_handler(
    mood_handler,
    lambda c: c.data.startswith("mood"),
    state=DayCheck.waiting_for_mood,
)
dp.register_message_handler(detail_handler, state=DayCheck.waiting_for_detail)
dp.register_message_handler(skip_detail_handler, commands=["skip"], state=DayCheck.waiting_for_detail)


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio

    async def on_startup(_):
        await set_commands(bot)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —É—Å–ø—ñ—à–Ω–µ!")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

