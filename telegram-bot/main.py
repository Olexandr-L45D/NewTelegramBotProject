# main.py ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
# –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä–æ–±–æ—Ç—É –ª–æ–∫–∞–ª—å–Ω–æ –π –Ω–∞ Railway. –ú–∞—î –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π keep_alive –¥–ª—è web-—Ö–æ—Å—Ç–∏–Ω–≥—É.

import os
import asyncio
import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (.env –∞–±–æ Railway Variables) ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ —É Variables Railway –∞–±–æ —É .env")

# --- –Ü–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---
from bot.handlers import (
    start_handler,
    callback_handler,
    save_handler,
    id_handler,
    users_handler,
    daycheck_start_handler,
    mood_handler,
    detail_handler,
    skip_detail_handler,
    back_to_menu_handler,
    back_to_menu_from_calories,
)
from bot.handlers_bmi import start_bmi, process_height, process_weight, process_age
from bot.handlers_sleep import (
    sleep_start_handler,
    sleep_hours_callback_handler,
    sleep_stats_handler
)
from bot.handlers_calories import (
    calories_start_handler,
    calories_food_select,
    calories_calculate
)

from bot.states import DayCheck, BMIForm, CaloriesTracker

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ö–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é Telegram --- "üìä –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫–∞–ª–æ—Ä—ñ—ó"
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="ü§ñ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="sleep", description="üí§ –¢—Ä–µ–∫–µ—Ä —Å–Ω—É"),
        BotCommand(command="calories", description="üìä –¢—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä—ñ–π"),
        BotCommand(command="save", description="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        BotCommand(command="day", description="üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?"),
        BotCommand(command="id", description="üÜî –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π Telegram ID"),
        BotCommand(command="users", description="üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"),
        BotCommand(command="bmi", description="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ BMI"),
    ]
    await bot.set_my_commands(commands)

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callback —Ç–∞ FSM —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---
dp.register_callback_query_handler(start_bmi, lambda c: c.data == "bmi")
dp.register_message_handler(process_height, state=BMIForm.waiting_for_height)
dp.register_message_handler(process_weight, state=BMIForm.waiting_for_weight)
dp.register_message_handler(process_age, state=BMIForm.waiting_for_age)

dp.register_message_handler(daycheck_start_handler, lambda m: m.text == "üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?")
dp.register_message_handler(users_handler, lambda m: m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
dp.register_message_handler(id_handler, lambda m: m.text == "üÜî –ú—ñ–π ID")
# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –≥–æ–¥–∏–Ω —Å–Ω—É---
dp.register_callback_query_handler(sleep_start_handler, lambda c: c.data == "sleep")
dp.register_callback_query_handler(sleep_hours_callback_handler, lambda c: c.data.startswith("sleep_"))
dp.register_callback_query_handler(sleep_stats_handler, lambda c: c.data == "stats_sleep")


dp.register_message_handler(start_handler, Command("start"))
dp.register_message_handler(save_handler, Command("save"))
dp.register_message_handler(id_handler, Command("id"))
dp.register_message_handler(users_handler, Command("users"))
dp.register_message_handler(daycheck_start_handler, Command("day"))

dp.register_callback_query_handler(
    mood_handler,
    lambda c: c.data.startswith("mood"),
    state=DayCheck.waiting_for_mood,
)
dp.register_message_handler(detail_handler, state=DayCheck.waiting_for_detail)
dp.register_message_handler(skip_detail_handler, commands=["skip"], state=DayCheck.waiting_for_detail)

# üÜï –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–ª—è —Ç—Ä–µ–∫–µ—Ä–∞ –∫–∞–ª–æ—Ä—ñ–π
dp.register_callback_query_handler(calories_start_handler, lambda c: c.data == "calories")
dp.register_callback_query_handler(calories_food_select, lambda c: c.data.startswith("food_"), state=CaloriesTracker.waiting_for_selection)
dp.register_callback_query_handler(calories_calculate, lambda c: c.data == "calc_calories", state=CaloriesTracker.waiting_for_selection)

# üîô –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
dp.register_callback_query_handler(back_to_menu_handler, lambda c: c.data == "back_to_menu", state="*")

# dp.register_callback_query_handler(back_to_menu_from_sleep, lambda c: c.data == "back_to_menu", state=SleepTracker.waiting_for_hours)
dp.register_callback_query_handler(back_to_menu_from_calories, lambda c: c.data == "back_to_menu", state=CaloriesTracker.waiting_for_selection)



# –£–í–ê–ì–ê! –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤ —Å–∞–º–æ–º—É –∫—ñ–Ω—Ü—ñ !
dp.register_callback_query_handler(callback_handler)

# --- –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π keep_alive (–¥–ª—è Flask/FastAPI –≤–µ—Ä—Å—ñ–π) ---
async def keep_alive(url: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—ñ–Ω–≥—É—î Railway-–¥–æ–º–µ–Ω, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å–Ω—É (–¥–ª—è web-–¥–µ–ø–ª–æ—é)."""
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(url) as resp:
                    print(f"üîÅ Keep-alive ping ({resp.status})")
            except Exception as e:
                print(f"‚ö†Ô∏è Keep-alive error: {e}")
            await asyncio.sleep(600)  # –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω


# --- –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ---
if __name__ == "__main__":
    async def on_startup(_):
        await set_commands(bot)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

        # üîπ –Ø–∫—â–æ –∫–æ–ª–∏—Å—å –¥–æ–¥–∞—Å–∏ Flask/FastAPI —ñ Railway –Ω–∞–¥–∞—î –¥–æ–º–µ–Ω ‚Äî —Ä–æ–∑–∫–æ–º–µ–Ω—Ç—É–π –Ω–∏–∂—á–µ:
        # asyncio.create_task(keep_alive('https://mybot.up.railway.app'))

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


