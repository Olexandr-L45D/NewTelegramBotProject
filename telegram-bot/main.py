# main.py ‚Äî –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞
# –¢—É—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–æ—Ç, Dispatcher —ñ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏.

import os
import time
import threading
import requests
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import BotCommand

# --- –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (.env –∞–±–æ Railway Variables) ---
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –î–æ–¥–∞–π –π–æ–≥–æ —É –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Railway –∞–±–æ —É .env")

# --- –Ü–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---
from bot.handlers import (
    start_handler,
    callback_handler,
    save_handler,
    id_handler,
    users_handler,
    daycheck_start_handler,
    mood_handler,
    detail_handler,
    skip_detail_handler,
)
from bot.handlers_bmi import start_bmi, process_height, process_weight, process_age
from bot.states import DayCheck, BMIForm

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ö–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é Telegram ---
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="ü§ñ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="save", description="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
        BotCommand(command="day", description="üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?"),
        BotCommand(command="id", description="üÜî –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π Telegram ID"),
        BotCommand(command="users", description="üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ"),
        BotCommand(command="bmi", description="‚öñÔ∏è –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ BMI"),
    ]
    await bot.set_my_commands(commands)

# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è callback —Ç–∞ FSM —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ ---
dp.register_callback_query_handler(start_bmi, lambda c: c.data == "bmi")
dp.register_message_handler(process_height, state=BMIForm.waiting_for_height)
dp.register_message_handler(process_weight, state=BMIForm.waiting_for_weight)
dp.register_message_handler(process_age, state=BMIForm.waiting_for_age)

dp.register_message_handler(daycheck_start_handler, lambda m: m.text == "üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?")
dp.register_message_handler(users_handler, lambda m: m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
dp.register_message_handler(id_handler, lambda m: m.text == "üÜî –ú—ñ–π ID")

dp.register_message_handler(start_handler, Command("start"))
dp.register_message_handler(save_handler, Command("save"))
dp.register_message_handler(id_handler, Command("id"))
dp.register_message_handler(users_handler, Command("users"))
dp.register_message_handler(daycheck_start_handler, Command("day"))

dp.register_callback_query_handler(callback_handler)

dp.register_callback_query_handler(
    mood_handler,
    lambda c: c.data.startswith("mood"),
    state=DayCheck.waiting_for_mood,
)
dp.register_message_handler(detail_handler, state=DayCheck.waiting_for_detail)
dp.register_message_handler(skip_detail_handler, commands=["skip"], state=DayCheck.waiting_for_detail)

# --- Keep-alive –¥–ª—è Railway (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —â–æ–± –Ω–µ –∑–∞—Å–∏–Ω–∞–≤) ---
def keep_alive(url: str):
    """–ü—ñ–Ω–≥—É—î —Ç–≤—ñ–π Railway-–¥–æ–º–µ–Ω –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å–Ω—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)."""
    while True:
        try:
            requests.get(url)
            print("üîÅ Pinged Railway keep-alive URL.")
        except Exception as e:
            print(f"‚ö†Ô∏è Keep-alive error: {e}")
        time.sleep(600)  # –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # –Ø–∫—â–æ Railway –≤–∏–¥–∞—î –≤–ª–∞—Å–Ω–∏–π URL (—Ç–∏–ø—É https://mybot.up.railway.app) ‚Äî –º–æ–∂–Ω–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ keep_alive:
    # threading.Thread(target=keep_alive, args=("https://mybot.up.railway.app",), daemon=True).start()

    async def on_startup(_):
        await set_commands(bot)
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)


# # main.py - –≥–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É - –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞) ‚Äî —Ç—É—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –±–æ—Ç, Dispatcher, —ñ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏.

# from aiogram import Bot, Dispatcher, executor
# from aiogram.dispatcher.filters import Command
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.types import BotCommand
# import threading
# import requests
# import time

# from bot.handlers import (
#     start_handler,
#     callback_handler,
#     save_handler,
#     id_handler,
#     users_handler,
#     daycheck_start_handler,
#     mood_handler,
#     detail_handler,
#     skip_detail_handler,
# )
# from bot.states import DayCheck
# from config import BOT_TOKEN
# from bot.handlers_bmi import start_bmi, process_height, process_weight, process_age
# from bot.states import BMIForm

# # --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
# bot = Bot(token=BOT_TOKEN)
# storage = MemoryStorage()  # FSM –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –ø–∞–º'—è—Ç—ñ
# dp = Dispatcher(bot, storage=storage)


# # --- –ö–æ–º–∞–Ω–¥–∏ –≤ –º–µ–Ω—é Telegram ---
# async def set_commands(bot: Bot):
#     commands = [
#         BotCommand(command="start", description="ü§ñ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
#         BotCommand(command="save", description="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"),
#         BotCommand(command="day", description="üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?"),
#         BotCommand(command="id", description="üÜî –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤—ñ–π Telegram ID"),
#         BotCommand(command="users", description="üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ"),
#         BotCommand(command="bmi", description="ü§ñ BMI"),
#     ]
#     await bot.set_my_commands(commands)

# # --- Callback –∫–Ω–æ–ø–∫–∏ ---
# dp.register_callback_query_handler(start_bmi, lambda c: c.data == "bmi")

# # --- FSM –¥–ª—è BMI ---
# dp.register_message_handler(process_height, state=BMIForm.waiting_for_height)
# dp.register_message_handler(process_weight, state=BMIForm.waiting_for_weight)
# dp.register_message_handler(process_age, state=BMIForm.waiting_for_age)

# # --- –•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ñ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è) ---
# dp.register_message_handler(daycheck_start_handler, lambda m: m.text == "üí¨ –Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?")
# dp.register_message_handler(users_handler, lambda m: m.text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
# dp.register_message_handler(id_handler, lambda m: m.text == "üÜî –ú—ñ–π ID")

# # --- –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ ---
# dp.register_message_handler(start_handler, Command("start"))
# dp.register_message_handler(save_handler, Command("save"))
# dp.register_message_handler(id_handler, Command("id"))
# dp.register_message_handler(users_handler, Command("users"))
# dp.register_message_handler(daycheck_start_handler, Command("day"))

# # --- Callback (—ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏) ---
# dp.register_callback_query_handler(callback_handler)

# # --- FSM –ª–æ–≥—ñ–∫–∞ (–µ—Ç–∞–ø–∏ –¥—ñ–∞–ª–æ–≥—É "–Ø–∫ –ø—Ä–æ–π—à–æ–≤ –¥–µ–Ω—å?") ---
# dp.register_callback_query_handler(
#     mood_handler,
#     lambda c: c.data.startswith("mood"),
#     state=DayCheck.waiting_for_mood,
# )
# dp.register_message_handler(detail_handler, state=DayCheck.waiting_for_detail)
# dp.register_message_handler(skip_detail_handler, commands=["skip"], state=DayCheck.waiting_for_detail)

# # --- added new function re-start on Render.com ---
# def keep_alive():
#     url = "https://newtelegrambotproject.onrender.com"
#     while True:
#         try:
#             requests.get(url)
#             print("Pinged Render to stay awake.")
#         except Exception as e:
#             print(f"Keep-alive error: {e}")
#         time.sleep(600)  # –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω


# # --- –ó–∞–ø—É—Å–∫ ---
# if __name__ == "__main__":
#     import asyncio
#     import threading

#     threading.Thread(target=keep_alive, daemon=True).start()  # ‚úÖ –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ main

#     async def on_startup(_):
#         await set_commands(bot)
#         print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
#         print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —É—Å–ø—ñ—à–Ω–µ!")
#         print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

#     executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

# –ó–∞–ª–∏—à–æ–∫ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ –±–µ–∑ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–∞ –†–ï–ù–î–ï–†
# # --- –ó–∞–ø—É—Å–∫ ---
# if __name__ == "__main__":
#     import asyncio

#     async def on_startup(_):
#         await set_commands(bot)
#         print("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
#         print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB —É—Å–ø—ñ—à–Ω–µ!")
#         print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

#     executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

